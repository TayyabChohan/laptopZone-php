<?php
if (!defined('BASEPATH'))
  exit('No direct script access allowed');
class m_Analysis extends CI_Model{

  public function __construct(){
    parent::__construct();
    $this->load->database();
  }

  public function activeListing(){
  	if(!empty($this->session->userdata('date_range'))){
  		$rslt = $this->input->post('date_range');
  		if(empty($rslt)){
  			$rslt = $this->session->userdata('date_range');
  		}
  		$rs = explode('-',$rslt);
	  	$fromdate = $rs[0];
	  	$todate = $rs[1];

	  	/*===Convert Date in 24-Apr-2016===*/
	  	$fromdate = date_create($rs[0]);
	  	$todate = date_create($rs[1]);

	  	$from = date_format($fromdate,'d-m-y');
	  	$to = date_format($todate, 'd-m-y');
	  	$from = "TO_DATE('$from "."00:00:00','DD-MM-YY HH24:MI:SS')" ; 
	  	$to = "TO_DATE('$to ". "23:59:59','DD-MM-YY HH24:MI:SS')";
	  	if(!empty($this->session->userdata('price_filter'))){
	  		$price_filter = $this->input->post('price_filter');
	  		if(empty($price_filter)){
  				$price_filter = $this->session->userdata('price_filter');
  			}
	  	}else{
	  		$price_filter = 50;
	  	}

  	}else{
  		$from = "TO_DATE(SYSDATE - 7,'DD-MM-YY HH24:MI:SS')" ; 
	  	$to = "TO_DATE(SYSDATE,'DD-MM-YY HH24:MI:SS')";
  		$price_filter = 50;
  	}
    //$get_list = $this->db->query("SELECT S.*, E.SEED_ID, E.EBAY_ITEM_DESC, E.LIST_PRICE, L.LIST_QTY, W.MAX_PRICE, W.MIN_PRICE, W.AVG_PRICE, W.QTY_SOLD, AC.ACTIVE_QTY, W.SOLD_KEY, AC.ACTIVE_KEY, E.LIST_DATE, E.LISTER_ID, EM.USER_NAME LISTED_BY, SE.CATEGORY_ID, AC.ITEM_RANK FROM (SELECT WW.ITEM_ID, MAX(WW.SALE_PRICE + WW.SHIPPING_COST) MAX_PRICE, MIN(WW.SALE_PRICE + WW.SHIPPING_COST) MIN_PRICE, ROUND(AVG(WW.SALE_PRICE + WW.SHIPPING_COST), 2) AVG_PRICE, COUNT(1) QTY_SOLD, MAX(WW.KEYWORD) SOLD_KEY FROM LZ_WEEKLY_SOLD_DATA WW WHERE WW.STATUS = 0 GROUP BY ITEM_ID) W, (SELECT EE.ITEM_ID, EE.LIST_ID, EE.EBAY_ITEM_ID, I.ITEM_MT_MANUFACTURE BRAND, I.ITEM_MT_MFG_PART_NO MPN, I.ITEM_MT_UPC         UPC, EE.ITEM_CONDITION     CONDITION_ID FROM EBAY_LIST_MT EE, ITEMS_MT I, LZ_ITEM_SEED SS WHERE EE.EBAY_ITEM_ID NOT IN (SELECT D.ITEM_ID FROM LZ_SALESLOAD_DET D WHERE D.SALE_DATE >= SYSDATE - 7) AND I.ITEM_ID = EE.ITEM_ID AND I.ITEM_ID = SS.ITEM_ID AND EE.SEED_ID = SS.SEED_ID AND EE.LIST_DATE >= SYSDATE - 7 AND EE.LIST_PRICE >= 50 AND I.ITEM_MT_MANUFACTURE NOT IN ('NA', 'N/A', 'UNKNOWN')) S, EBAY_LIST_MT E, EMPLOYEE_MT EM, LZ_ITEM_SEED SE, (SELECT MAX(LIST_ID) LIST_ID, SUM(LIST_QTY) LIST_QTY FROM (SELECT EEE.LIST_ID, EEE.ITEM_ID, EEE.EBAY_ITEM_ID, EEE.EBAY_ITEM_DESC, EEE.LIST_PRICE, EEE.LIST_QTY, I.ITEM_MT_MANUFACTURE BRAND, I.ITEM_MT_MFG_PART_NO MPN, I.ITEM_MT_UPC         UPC, EEE.ITEM_CONDITION    CONDITION_ID FROM EBAY_LIST_MT EEE, ITEMS_MT I, LZ_ITEM_SEED SSS WHERE EEE.ITEM_ID NOT IN (SELECT D.ITEM_ID FROM LZ_SALESLOAD_DET D WHERE D.SALE_DATE >= SYSDATE - 7) AND I.ITEM_ID = EEE.ITEM_ID AND I.ITEM_ID = SSS.ITEM_ID AND EEE.SEED_ID = SSS.SEED_ID AND EEE.LIST_DATE >= SYSDATE - 7 AND EEE.LIST_PRICE >= 50 AND I.ITEM_MT_MANUFACTURE NOT IN ('NA', 'N/A', 'UNKNOWN')) GROUP BY EBAY_ITEM_ID) L, (SELECT D.ITEM_ID, COUNT(1) ACTIVE_QTY, MAX(D.KEYWORD) ACTIVE_KEY,MAX(D.ITEM_RANK) ITEM_RANK FROM LZ_EBAY_ACTIVE_DATA D GROUP BY D.ITEM_ID) AC WHERE W.ITEM_ID = S.ITEM_ID AND W.ITEM_ID = E.ITEM_ID AND E.ITEM_ID = S.ITEM_ID AND E.LIST_ID = L.LIST_ID AND E.LIST_ID = S.LIST_ID AND S.ITEM_ID = AC.ITEM_ID(+) AND E.LISTER_ID = EM.EMPLOYEE_ID AND E.SEED_ID = SE.SEED_ID ORDER BY ACTIVE_QTY, QTY_SOLD DESC " )->result_array(); 

    $get_list = $this->db->query("SELECT DECODE((SELECT MI.LISTER_ID FROM EBAY_LIST_MT MI WHERE MI.LISTER_ID = 49 AND MI.EBAY_ITEM_ID = S.EBAY_ITEM_ID AND ROWNUM <= 1), NULL, '', 'Updated BY Ali') STATUS,S.*, E.SEED_ID, E.EBAY_ITEM_DESC, E.LIST_PRICE, L.LIST_QTY, W.MAX_PRICE, W.MIN_PRICE, W.AVG_PRICE, W.QTY_SOLD, AC.ACTIVE_QTY, W.SOLD_KEY, AC.ACTIVE_KEY,  TO_CHAR(E.LIST_DATE,'DD-MM-YY HH24:MI:SS') LIST_DATE, E.LISTER_ID, EM.USER_NAME LISTED_BY, SE.CATEGORY_ID, AC.ITEM_RANK FROM (SELECT WW.ITEM_ID, MAX(WW.SALE_PRICE + WW.SHIPPING_COST) MAX_PRICE, MIN(WW.SALE_PRICE + WW.SHIPPING_COST) MIN_PRICE, ROUND(AVG(WW.SALE_PRICE + WW.SHIPPING_COST), 2) AVG_PRICE, COUNT(1) QTY_SOLD, MAX(WW.KEYWORD) SOLD_KEY FROM LZ_WEEKLY_SOLD_DATA WW WHERE WW.STATUS = 0 GROUP BY ITEM_ID) W, (SELECT EE.ITEM_ID, EE.LIST_ID, EE.EBAY_ITEM_ID, I.ITEM_MT_MANUFACTURE BRAND, I.ITEM_MT_MFG_PART_NO MPN, I.ITEM_MT_UPC         UPC, EE.ITEM_CONDITION     CONDITION_ID FROM EBAY_LIST_MT EE, ITEMS_MT I, LZ_ITEM_SEED SS WHERE EE.EBAY_ITEM_ID NOT IN (SELECT D.ITEM_ID FROM LZ_SALESLOAD_DET D WHERE D.SALE_DATE BETWEEN $from AND $to) AND I.ITEM_ID = EE.ITEM_ID AND I.ITEM_ID = SS.ITEM_ID AND EE.SEED_ID = SS.SEED_ID AND EE.LIST_DATE BETWEEN $from AND $to AND EE.LIST_PRICE >= $price_filter AND I.ITEM_MT_MANUFACTURE NOT IN ('NA', 'N/A', 'UNKNOWN')) S, EBAY_LIST_MT E, EMPLOYEE_MT EM, LZ_ITEM_SEED SE, (SELECT MAX(LIST_ID) LIST_ID, SUM(LIST_QTY) LIST_QTY FROM (SELECT EEE.LIST_ID, EEE.ITEM_ID, EEE.EBAY_ITEM_ID, EEE.EBAY_ITEM_DESC, EEE.LIST_PRICE, EEE.LIST_QTY, I.ITEM_MT_MANUFACTURE BRAND, I.ITEM_MT_MFG_PART_NO MPN, I.ITEM_MT_UPC         UPC, EEE.ITEM_CONDITION    CONDITION_ID FROM EBAY_LIST_MT EEE, ITEMS_MT I, LZ_ITEM_SEED SSS WHERE EEE.ITEM_ID NOT IN (SELECT D.ITEM_ID FROM LZ_SALESLOAD_DET D WHERE D.SALE_DATE BETWEEN $from AND $to) AND I.ITEM_ID = EEE.ITEM_ID AND I.ITEM_ID = SSS.ITEM_ID AND EEE.SEED_ID = SSS.SEED_ID AND EEE.LIST_DATE BETWEEN $from AND $to AND EEE.LIST_PRICE >= $price_filter AND I.ITEM_MT_MANUFACTURE NOT IN ('NA', 'N/A', 'UNKNOWN')) GROUP BY EBAY_ITEM_ID) L, (SELECT D.ITEM_ID, COUNT(1) ACTIVE_QTY, MAX(D.KEYWORD) ACTIVE_KEY,MAX(D.ITEM_RANK) ITEM_RANK FROM LZ_EBAY_ACTIVE_DATA D GROUP BY D.ITEM_ID) AC WHERE W.ITEM_ID = S.ITEM_ID AND W.ITEM_ID = E.ITEM_ID AND E.ITEM_ID = S.ITEM_ID AND E.LIST_ID = L.LIST_ID AND E.LIST_ID = S.LIST_ID AND S.ITEM_ID = AC.ITEM_ID(+) AND E.LISTER_ID = EM.EMPLOYEE_ID AND E.SEED_ID = SE.SEED_ID ORDER BY ACTIVE_QTY, QTY_SOLD DESC " )->result_array(); return array('get_list'=>$get_list );
  } 
  public function getData(){
  	  $rslt = $this->input->post('date_range');
  	  $price_filter = $this->input->post('price');
	  $this->session->set_userdata('date_range', $rslt);
	  $this->session->set_userdata('price_filter', $price_filter);
	  $rs = explode('-',$rslt);
	  $fromdate = $rs[0];
	  $todate = $rs[1];

	  /*===Convert Date in 24-Apr-2016===*/
	  $fromdate = date_create($rs[0]);
	  $todate = date_create($rs[1]);

	  $from = date_format($fromdate,'d-m-y');
	  $to = date_format($todate, 'd-m-y');
     //var_dump($from,$to);exit;

	$get_item = $this->db->query("SELECT DISTINCT E.ITEM_ID, E.EBAY_ITEM_ID, I.ITEM_MT_MANUFACTURE BRAND, I.ITEM_MT_MFG_PART_NO MPN, I.ITEM_MT_UPC         UPC, S.CATEGORY_ID, E.ITEM_CONDITION      CONDITION_ID FROM EBAY_LIST_MT E, ITEMS_MT I, LZ_ITEM_SEED S WHERE E.ITEM_ID NOT IN (SELECT D.ITEM_ID FROM LZ_SALESLOAD_DET D WHERE D.SALE_DATE BETWEEN TO_DATE('$from "."00:00:00','DD-MM-YY HH24:MI:SS') AND TO_DATE('$to ". "23:59:59','DD-MM-YY HH24:MI:SS')) AND I.ITEM_ID = E.ITEM_ID AND I.ITEM_ID = S.ITEM_ID AND E.SEED_ID = S.SEED_ID AND E.LIST_DATE BETWEEN TO_DATE('$from "."00:00:00','DD-MM-YY HH24:MI:SS') AND TO_DATE('$to ". "23:59:59','DD-MM-YY HH24:MI:SS') AND E.LIST_PRICE >= $price_filter AND I.ITEM_MT_MANUFACTURE NOT IN ('NA', 'N/A', 'UNKNOWN')")->result_array(); 
    return $get_item;
	

	}

}